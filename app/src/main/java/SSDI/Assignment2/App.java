/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package SSDI.Assignment2;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import java.util.ArrayList;
import java.util.List;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

public class App {

    public static void main(String[] args) {

        String file = "airline_safety.csv";

        // List that we fill with extracted values from each column
        List<String> airline = new ArrayList<String>();
        List<String> avail_seat_km_per_week = new ArrayList<String>();
        List<String> incidents_85_99 = new ArrayList<String>();
        List<String> fatal_accidents_85_99 = new ArrayList<String>();
        List<String> fatalities_85_99 = new ArrayList<String>();
        List<String> incidents_00_14 = new ArrayList<String>();
        List<String> fatal_accidents_00_14 = new ArrayList<String>();
        List<String> fatalities_00_14 = new ArrayList<String>();
        List<String> totalNumIncidents = new ArrayList<String>();

        // List for stats of each column
        List<String> col_names = new ArrayList<String>();
        List<Integer> min_values = new ArrayList<Integer>();
        List<Integer> max_values = new ArrayList<Integer>();
        List<Integer> mean_values = new ArrayList<Integer>();

        int total_avail = 0;
        int total_inc88 =0 ;
        int total_fatal_acc85=0;
        int total_fatal85=0;
        int total_inc00=0;
        int total_fatal_acc00=0;
        int total_fatal00=0;

        

        List<String> incidents_85_99_stats = new ArrayList<String>();
        List<String> fatal_accidents_85_99_stats = new ArrayList<String>();
        List<String> fatalities_85_99_stats = new ArrayList<String>();
        List<String> incidents_00_14_stats = new ArrayList<String>();
        List<String> fatal_accidents_00_14_stats = new ArrayList<String>();
        List<String> fatalities_00_14_stats = new ArrayList<String>();

        String line;
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            int count = 0;
            while ((line = br.readLine()) != null) {
                //System.out.println(line);

                // Get a list of all the column names: needed for part 2
                if (count == 0){
                    for (int i = 0; i < 8; i++){
                        col_names.add(line.split(",")[i]);
                    }
                }

                // add each section into it's own list
                airline.add(line.split(",")[0]);
                avail_seat_km_per_week.add(line.split(",")[1]);
                incidents_85_99.add(line.split(",")[2]);
                fatal_accidents_85_99.add(line.split(",")[3]);
                fatalities_85_99.add(line.split(",")[4]);
                incidents_00_14.add(line.split(",")[5]);
                fatal_accidents_00_14.add(line.split(",")[6]);
                fatalities_00_14.add(line.split(",")[7]);


                //avail_seat_km_per_week_stats.add(toInt(line.split(",")[1]));
                incidents_85_99_stats.add(line.split(",")[2]);
                fatal_accidents_85_99_stats.add(line.split(",")[3]);
                fatalities_85_99_stats.add(line.split(",")[4]);
                incidents_00_14_stats.add(line.split(",")[5]);
                fatal_accidents_00_14_stats.add(line.split(",")[6]);
                fatalities_00_14_stats.add(line.split(",")[7]);

                count ++;
            }
        } catch (Exception e) {
            System.out.println(e);
        }

        // For loop that sums both incident numbers (in each time period) and creates an
        // array full of them
        // NOTE: This for loop also loops through every column and finds min

        int min_avail = toInt(avail_seat_km_per_week.get(1));
        int min_incidents85 = toInt(incidents_85_99.get(1));
        int min_fatal_acc85 = toInt(fatal_accidents_85_99.get(1));
        int min_fatal85 = toInt(fatalities_85_99.get(1));
        int min_incidents00 = toInt(incidents_00_14.get(1));
        int min_fatal_acc00 = toInt(fatal_accidents_00_14.get(1));
        int min_fatal00 = toInt(fatalities_00_14.get(1));

        int max_avail = toInt(avail_seat_km_per_week.get(1));
        int max_incidents85 = toInt(incidents_85_99.get(1));
        int max_fatal_acc85 = toInt(fatal_accidents_85_99.get(1));
        int max_fatal85 = toInt(fatalities_85_99.get(1));
        int max_incidents00 = toInt(incidents_00_14.get(1));
        int max_fatal_acc00 = toInt(fatal_accidents_00_14.get(1));
        int max_fatal00 = toInt(fatalities_00_14.get(1));


        for (int i = 1; i < incidents_00_14.size(); i++) {
            int oldEra = toInt(incidents_85_99.get(i));
            int newEra = toInt(incidents_00_14.get(i));
            int total = oldEra + newEra;
            totalNumIncidents.add(Integer.toString(total));

            total_avail+=toInt(incidents_85_99.get(i));

            // Find min values of every column
            if(min_avail > toInt(avail_seat_km_per_week.get(i))){
                min_avail = toInt(avail_seat_km_per_week.get(i));
            }
            if(min_incidents85 > toInt(avail_seat_km_per_week.get(i))){
                min_incidents85 = toInt(avail_seat_km_per_week.get(i));
            }
            if(min_fatal_acc85 > toInt(avail_seat_km_per_week.get(i))){
                min_fatal85 = toInt(avail_seat_km_per_week.get(i));
            }
            if(min_fatal85 > toInt(avail_seat_km_per_week.get(i))){
                min_fatal85 = toInt(avail_seat_km_per_week.get(i));
            }
            if(min_incidents00 > toInt(avail_seat_km_per_week.get(i))){
                min_incidents00 = toInt(avail_seat_km_per_week.get(i));
            }
            if(min_fatal_acc00 > toInt(avail_seat_km_per_week.get(i))){
                min_fatal00 = toInt(avail_seat_km_per_week.get(i));
            }
            if(min_fatal00 > toInt(avail_seat_km_per_week.get(i))){
                min_fatal00 = toInt(avail_seat_km_per_week.get(i));
            }

            // Find max values of every column
            if(max_avail < toInt(avail_seat_km_per_week.get(i))){
                max_avail = toInt(avail_seat_km_per_week.get(i));
            }
            if(max_incidents85 < toInt(avail_seat_km_per_week.get(i))){
                max_incidents85 = toInt(avail_seat_km_per_week.get(i));
            }
            if(max_fatal_acc85 < toInt(avail_seat_km_per_week.get(i))){
                max_fatal85 = toInt(avail_seat_km_per_week.get(i));
            }
            if(max_fatal85 < toInt(avail_seat_km_per_week.get(i))){
                max_fatal85 = toInt(avail_seat_km_per_week.get(i));
            }
            if(max_incidents00 < toInt(avail_seat_km_per_week.get(i))){
                max_incidents00 = toInt(avail_seat_km_per_week.get(i));
            }
            if(max_fatal_acc00 < toInt(avail_seat_km_per_week.get(i))){
                max_fatal00 = toInt(avail_seat_km_per_week.get(i));
            }
            if(max_fatal00 < toInt(avail_seat_km_per_week.get(i))){
                max_fatal00 = toInt(avail_seat_km_per_week.get(i));
            }


        }
        min_values.add(min_avail);
        min_values.add(min_incidents85);
        min_values.add(min_fatal_acc85);
        min_values.add(min_fatal85);
        min_values.add(min_incidents00);
        min_values.add(min_fatal_acc00);
        min_values.add(min_fatal00);

        max_values.add(max_avail);
        max_values.add(max_incidents85);
        max_values.add(max_fatal_acc85);
        max_values.add(max_fatal85);
        max_values.add(max_incidents00);
        max_values.add(max_fatal_acc00);
        max_values.add(max_fatal00);


        // Converts our csv file to an xml file and adds an extra 'column' or section
        // that contains
        // the total # of incidents from 85 to 14
        String xml_filepath = "converted_airline_safety.xml";
        try {

            DocumentBuilderFactory documentFactory = DocumentBuilderFactory.newInstance();

            DocumentBuilder documentBuilder = documentFactory.newDocumentBuilder();

            Document document = documentBuilder.newDocument();

            // root element
            Element root = document.createElement("AirlineData");
            document.appendChild(root);
            for (int i = 1; i < avail_seat_km_per_week.size(); i++) {

                //System.out.print("\n Airline Name is: " + airline.get(i));

                // airline element
                Element airline_el = document.createElement("airline");

                root.appendChild(airline_el);

                Element name_el = document.createElement("Name");
                name_el.appendChild(document.createTextNode(airline.get(i)));
                airline_el.appendChild(name_el);

                // avail_seat_km_per_week element
                Element avail_seat_km_per_week_el = document.createElement("avail_seat_km_per_week");
                avail_seat_km_per_week_el.appendChild(document.createTextNode(avail_seat_km_per_week.get(i)));
                airline_el.appendChild(avail_seat_km_per_week_el);

                // incidents_85_99 element
                Element incidents_85_99_el = document.createElement("incidents_85_99");
                incidents_85_99_el.appendChild(document.createTextNode(incidents_85_99.get(i)));
                airline_el.appendChild(incidents_85_99_el);

                // email element
                Element fatal_accidents_85_99_el = document.createElement("fatal_accidents_85_99");
                fatal_accidents_85_99_el.appendChild(document.createTextNode(fatal_accidents_85_99.get(i)));
                airline_el.appendChild(fatal_accidents_85_99_el);

                // department elements
                Element fatalities_85_99_el = document.createElement("fatalities_85_99");
                fatalities_85_99_el.appendChild(document.createTextNode(fatalities_85_99.get(i)));
                airline_el.appendChild(fatalities_85_99_el);

                // incidents_85_99 element
                Element incidents_00_14_el = document.createElement("incidents_00_14");
                incidents_00_14_el.appendChild(document.createTextNode(incidents_00_14.get(i)));
                airline_el.appendChild(incidents_00_14_el);

                // email element
                Element fatal_accidents_00_14_el = document.createElement("fatal_accidents_00_14");
                fatal_accidents_00_14_el.appendChild(document.createTextNode(fatal_accidents_00_14.get(i)));
                airline_el.appendChild(fatal_accidents_00_14_el);

                // department elements
                Element fatalities_00_14_el = document.createElement("fatalities_00_14");
                fatalities_00_14_el.appendChild(document.createTextNode(fatalities_00_14.get(i)));
                airline_el.appendChild(fatalities_00_14_el);

                Element totalNumIncidents_el = document.createElement("Total_Incidents");
                totalNumIncidents_el.appendChild(document.createTextNode(totalNumIncidents.get(i - 1)));
                airline_el.appendChild(totalNumIncidents_el);

            }

            // create the xml file
            // transform the DOM Object to an XML File
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            DOMSource domSource = new DOMSource(document);
            StreamResult streamResult = new StreamResult(new File(xml_filepath));

            // If you use
            // StreamResult result = new StreamResult(System.out);
            // the output will be pushed to the standard output ...
            // You can use that for debugging

            transformer.transform(domSource, streamResult);

            System.out.println("Done creating XML File");

        } catch (ParserConfigurationException pce) {
            pce.printStackTrace();
        } catch (TransformerException tfe) {
            tfe.printStackTrace();
        }

        String stats_xml_file = "airline_summary_statistic.xml";
        try {

            DocumentBuilderFactory documentFactory = DocumentBuilderFactory.newInstance();

            DocumentBuilder documentBuilder = documentFactory.newDocumentBuilder();

            Document document = documentBuilder.newDocument();

            // root element
            Element root = document.createElement("Summary");
            document.appendChild(root);
            for (int i = 0; i < 8; i++) {


                // airline element
                Element summary_el = document.createElement("Stat");

                root.appendChild(summary_el);

                Element name_el = document.createElement("Name");
                name_el.appendChild(document.createTextNode(col_names.get(i)));
                summary_el.appendChild(name_el);

                // avail_seat_km_per_week element
                Element min_el = document.createElement("min");
                min_el.appendChild(document.createTextNode(min_values.get(i).toString())); // MUST CHANGE
                summary_el.appendChild(min_el);

                Element max_el = document.createElement("max");
                max_el.appendChild(document.createTextNode(max_values.get(i).toString()));
                summary_el.appendChild(max_el);
                
                Element avg_el = document.createElement("avg");
                avg_el.appendChild(document.createTextNode(avail_seat_km_per_week.get(i)));
                summary_el.appendChild(avg_el);


            }

            // create the xml file
            // transform the DOM Object to an XML File
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            DOMSource domSource = new DOMSource(document);
            StreamResult streamResult = new StreamResult(new File(stats_xml_file));

            // If you use
            // StreamResult result = new StreamResult(System.out);
            // the output will be pushed to the standard output ...
            // You can use that for debugging

            transformer.transform(domSource, streamResult);

            System.out.println("Done creating XML File");

        } catch (ParserConfigurationException pce) {
            pce.printStackTrace();
        } catch (TransformerException tfe) {
            tfe.printStackTrace();
        }

    }
    public static int toInt(String input){
        int i = 0;
        try{
            i = Integer.parseInt(input);
        } catch(NumberFormatException e){ // handle your exception
            e.printStackTrace();
        }
        return i;

    }
}
